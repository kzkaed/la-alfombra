cmdhistory=["*ns*" "(csk/->snake_case \\"correle la alfombra\\")" "(ns la-alfombra.roja)" "(csk->snake_case \\"correle la alfombra\\")" "*ns*" "(csk/->snake_case \\"correle la alfombra\\")" "*ns*" "(csk/->snake_case \\"a\\")" "*ns*" "(csk/->snake_case \\"a\\")" "*ns*" "(cons '() \\"red\\")" "(cons input '())" "(cons \\"red\\" '())" "(not nil)" "who-atom" "*ns*" "(def who-atom (atom \:caterpillar))" "who-atom" "@who-atom" "(reset\! who-atom \:chrysalis)" "who-atom" "(reset\! who-atom \:caterpillar)" "(def who-atom (atom \:caterpiller))" "(reset\! la-alfombra.roja/who-atom \:chrysalis)" "(swap\! who-atom change)" "(who-atom)" "la-alfombra.roja/who-atom" "(reset\! la-alfombra.roja/who-atom \:caterpillar)" "la-alfombra.roja/who-atom" "la-alfombra.roja/@who-atom" "@who-atom" "(swap\! who-atom change)" "(swap\! la-alfombra.roja/who-atom change)" "(reset\! who-atom (atom \:caterpillar))" "@who-atom" "(@who-atom)" "*ns*" "who-atom" "(@who-atom)" "who-atom" "(reset\! la-alfombra.roja/who-atom \:caterpillar)" "who-atom" "@who-atom" "(swap\! who-atom change)" "@who-atom" "(defn change [state]\\n  (case state\\n    \:caterpillar \:chrysalis\\n    \:chrysalis \:butterfly\\n    \:butterfly))" "(swap\! who-atom change)" "@who-atom" "(def counter (atom 0))" "@counter" "(dotimes [_ 5] (swap\! conter inc))@counter" "(dotimes [_ 5] (swap\! counter inc))@counter" "(reset\! counter 0)" "@counter" "counter" "(dotimes [_ 5] (swap\! counter inc))" "@counter" "*ns*" "counter-more" "la-alfombra.roja/counter-more" "@counter" "(reset\! counter 0)" "@counter" "(let [n 5]\\n  (future (dotimes [_ n] (swap\! counter inc)))\\n  (future (dotimes [_ n] (swap\! counter inc)))\\n  (future (dotimes [_ n] (swap\! counter inc))))\\n\\n@counter" "@counter" "(def counter (atom 0))" "@counter" "(defn inc-print [val]\\n  (println val)\\n  (inc val))" "@counter" "(def counter (atom 0))" "(defn inc-print [val]\\n  (println val)\\n  (inc val))\\n(swap\! counter inc-print)\\n@counter" "(cons 5 '())" "(defn build-a-list [x]\\n  (cons x '()))" "(build-a-list 1)" "(build-a-list [1 2 3 4])" "(build-at-list 1 2 3 4)" "(build-a-list 1 2 3 4)" "(build-a-list 2)" "(cons 4 (cons 5 nil))" "(cons 5(cons 5 nil))" "defn build [x]" "(defn build [x]\\n  (cons x (cons x nil)))" "(build 5)"]
eclipse.preferences.version=1
